---
globs:
  [
    '**/lib/openai.ts',
    '**/lib/documentGeneration.ts',
    '**/features/document-generation/**/*.tsx',
    '**/features/document-generation/**/*.ts',
  ]
exclude: ['**/__tests__/**', '**/*.test.*', '**/*.spec.*']
---

# AI Integration Standards

## Core AI Features

The application uses AI for the following functions:

1. **Custom Cover Letter Generation**: AI creates personalized cover letters that match job requirements
2. **Template Enhancement**: AI processes ERB instructions in templates to generate dynamic content
3. **Future Features**: Intelligent skill selection and resume tailoring are planned for future implementation

## Natural Writing Guidelines

### Language and Tone Standards

**Avoid these AI-typical patterns:**

1. **Undue emphasis on symbolism and importance**

   - Avoid: "stands as a testament", "plays a vital role", "underscores its importance", "continues to captivate", "leaves a lasting impact", "watershed moment", "key turning point", "deeply rooted", "profound heritage", "steadfast dedication"
   - Instead: Use specific, concrete language that directly describes facts

2. **Promotional language**

   - Avoid: "rich cultural heritage", "rich history", "breathtaking", "must-visit", "must-see", "stunning natural beauty", "enduring legacy", "rich cultural tapestry"
   - Instead: Use neutral, factual descriptions

3. **Editorializing**

   - Avoid: "it's important to note", "it is worth", "no discussion would be complete without", "in this article"
   - Instead: Present facts directly without editorial commentary

4. **Overuse of conjunctions**

   - Avoid: Excessive use of "moreover", "in addition", "furthermore", "on the other hand"
   - Instead: Use varied, natural transitions

5. **Section summaries**

   - Avoid: "In summary", "In conclusion", "Overall" at paragraph/section ends
   - Instead: Let content flow naturally without forced summaries

6. **Negative parallelisms**

   - Avoid: "Not only... but...", "It is not just about..., it's..."
   - Instead: Use direct, positive statements

7. **Rule of three overuse**

   - Avoid: Excessive use of "adjective, adjective, and adjective" patterns
   - Instead: Vary sentence structure naturally

8. **Superficial analyses**

   - Avoid: "ensuring...", "highlighting...", "emphasizing...", "reflecting..."
   - Instead: Provide specific, actionable insights

9. **Vague attributions**
   - Avoid: "Industry reports", "Observers have cited", "Some critics argue"
   - Instead: Use specific, verifiable sources or present information directly

### Style Guidelines

1. **Section headings**: Use sentence case, not title case
2. **Boldface**: Use sparingly, only for article subject names in first mention
3. **Lists**: Prefer prose over lists when content flows naturally
4. **Em dashes**: Use sparingly; prefer commas or parentheses
5. **Quotation marks**: Use straight quotes (" ") not curly quotes (" ")
6. **Apostrophes**: Use straight apostrophes (') not curly apostrophes (')
7. **No emojis**: Avoid emoji usage in professional content
8. **No knowledge-cutoff disclaimers**: Avoid "as of [date]" or "up to my last training update"

### Content Structure

1. **Avoid abrupt cutoffs**: Ensure content flows naturally to conclusion
2. **Maintain consistent English variety**: Match the user's location/nationality
3. **Vary sentence structure**: Avoid repetitive patterns
4. **Use specific examples**: Provide concrete details rather than generalizations
5. **Focus on facts**: Present information directly without unnecessary commentary

## OpenAI API Integration

### API Configuration

- **API key security**: Store OpenAI API key in environment variables
- **Rate limiting**: Implement rate limiting and error handling
- **Safe logging**: Use safe logging practices
- **Template enhancement**: Support template enhancement capabilities

### OpenAI Service

```typescript
// src/lib/openai.ts
import { getAIConfig } from '@/config/ai';

export type OpenAIResponse = {
  content: string;
  usage?: {
    prompt_tokens: number;
    completion_tokens: number;
    total_tokens: number;
  };
};

export async function callOpenAI(
  prompt: string,
  systemMessage?: string,
): Promise<OpenAIResponse> {
  const config = getAIConfig();

  if (!config.apiKey) {
    throw new Error('OpenAI API key is not configured');
  }

  const messages = [
    ...(systemMessage
      ? [{ role: 'system' as const, content: systemMessage }]
      : []),
    { role: 'user' as const, content: prompt },
  ];

  try {
    const response = await fetch('https://api.openai.com/v1/chat/completions', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        Authorization: `Bearer ${config.apiKey}`,
      },
      body: JSON.stringify({
        model: config.model,
        messages,
        max_tokens: config.maxTokens,
        temperature: config.temperature,
      }),
    });

    if (!response.ok) {
      const error = await response.json().catch(() => ({}));
      throw new Error(
        `OpenAI API error: ${response.status} ${error.error?.message || response.statusText}`,
      );
    }

    const data = await response.json();
    const content = data.choices[0]?.message?.content;

    if (!content) {
      throw new Error('No content received from OpenAI API');
    }

    return {
      content,
      usage: data.usage,
    };
  } catch (error) {
    console.error('OpenAI API call failed:', error);
    throw error;
  }
}
```

## AI Features Implementation

### 1. Custom Cover Letter Generation

```typescript
export async function generateCoverLetter(
  jobDescription: string,
  companyDetails: string,
  userExperience: string,
): Promise<string> {
  const systemMessage = `You are a professional cover letter writer. Create a compelling, personalized cover letter that:
- Addresses the specific job requirements directly
- Highlights relevant experience with concrete examples
- Shows genuine interest in the company
- Uses professional, natural language
- Is between 200-300 words
- Avoids promotional language and editorializing
- Uses varied sentence structure
- Focuses on facts and specific achievements
- Maintains a neutral, professional tone`;

  const prompt = `Please write a cover letter for the following position:

Job Description:
${jobDescription}

Company Information:
${companyDetails}

My Experience:
${userExperience}

Write a professional cover letter that connects my experience to this specific role. Use natural language and avoid AI-typical phrases.`;

  const response = await callOpenAI(prompt, systemMessage);
  return response.content;
}
```

### 2. Template Enhancement

The application supports AI-enhanced template processing through ERB instructions:

```typescript
// Example template with AI enhancement
const template = `
Dear {{Job Manager}},

<%=Write a compelling opening paragraph that connects my experience with {{My Skills}} to the {{Job Title}} position at {{Job Company}}. Use specific examples and natural language.%>

I am writing to express my interest in the {{Job Title}} position at {{Job Company}}.

Best regards,
{{My Name}}
`;
```

### 3. Future AI Features

The following AI features are planned for future implementation:

- **Intelligent Skill Selection**: AI analysis of job requirements to select relevant skills
- **Resume Tailoring**: AI customization of resume content for specific positions
- **Job Description Analysis**: AI analysis of job descriptions to extract key requirements
- **Interview Preparation**: AI-generated interview questions and preparation materials

## AI Integration Patterns

### API Key Management

- **Environment Variables**: Store API keys in environment variables only
- **Client-Side Safety**: Never expose API keys in client-side code
- **Server-Side Validation**: Validate API keys on the server side
- **Key Rotation**: Support API key rotation for security

### Rate Limiting

- **Request throttling**: Implement request throttling
- **Error handling**: Handle rate limit errors gracefully
- **User feedback**: Provide clear feedback for rate limit issues
- **Retry logic**: Implement intelligent retry logic

### Error Handling

- **Graceful degradation**: Handle AI service failures gracefully
- **User feedback**: Provide clear error messages to users
- **Fallback options**: Provide fallback options when AI is unavailable
- **Logging**: Log errors for debugging without exposing sensitive data

## AI Safety

### Content Safety

- **Content filtering**: Filter inappropriate or unsafe content
- **User warnings**: Warn users about AI-generated content
- **Content review**: Allow users to review and edit AI content
- **Safety guidelines**: Follow AI safety best practices

### Data Privacy

- **Data minimization**: Minimize data sent to AI services
- **User consent**: Get user consent for AI processing
- **Data retention**: Implement appropriate data retention policies
- **Privacy controls**: Give users control over their data

## AI Development

### Testing AI Features

- **Mock responses**: Use mock responses for testing
- **Error scenarios**: Test error scenarios and edge cases
- **Performance testing**: Test AI feature performance
- **User experience**: Test AI feature user experience

### AI Feature Flags

- **Feature toggles**: Use feature flags for AI features
- **Gradual rollout**: Roll out AI features gradually
- **A/B testing**: Test AI features with A/B testing
- **User feedback**: Collect user feedback on AI features

## AI Configuration

### Environment Variables

```typescript
// src/config/ai.ts
export type AIConfig = {
  // API Configuration
  apiKey: string;
  model: string;
  maxTokens: number;
  temperature: number;

  // Rate Limiting
  requestsPerMinute: number;
  requestsPerHour: number;

  // Security
  enableLogging: boolean;
  logLevel: 'none' | 'error' | 'warn' | 'info';

  // Feature Flags
  enableAI: boolean;
  enableStreaming: boolean;
  enableRetry: boolean;
};
```

### AI Service Integration

- **Service abstraction**: Abstract AI service integration
- **Multiple providers**: Support multiple AI providers
- **Service selection**: Allow users to select AI providers
- **Service comparison**: Compare different AI services

## AI User Experience

### User Interface

- **Loading states**: Show appropriate loading states for AI operations
- **Progress indicators**: Show progress for long-running AI operations
- **Error messages**: Provide clear error messages for AI failures
- **Success feedback**: Provide clear success feedback

### User Control

- **AI toggle**: Allow users to enable/disable AI features
- **Content editing**: Allow users to edit AI-generated content
- **Regeneration**: Allow users to regenerate AI content
- **Customization**: Allow users to customize AI behavior

## AI Documentation

### API Documentation

- **Clear documentation**: Document AI API usage clearly
- **Examples**: Provide clear examples of AI API usage
- **Error codes**: Document AI API error codes
- **Best practices**: Document AI API best practices

### User Documentation

- **Feature explanation**: Explain AI features to users
- **Usage guides**: Provide usage guides for AI features
- **Troubleshooting**: Provide troubleshooting for AI issues
- **FAQ**: Provide FAQ for common AI questions

### User Documentation

- **Feature explanation**: Explain AI features to users
- **Usage guides**: Provide usage guides for AI features
- **Troubleshooting**: Provide troubleshooting for AI issues
- **FAQ**: Provide FAQ for common AI questions
