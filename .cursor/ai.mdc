---
globs:
  [
    '**/lib/openai.ts',
    '**/lib/documentGeneration.ts',
    '**/features/document-generation/**/*.tsx',
    '**/features/document-generation/**/*.ts',
  ]
exclude: ['**/__tests__/**', '**/*.test.*', '**/*.spec.*']
---

# AI Integration Standards

## Core AI Features

The application uses AI for three primary functions:

1. **Intelligent Skill Selection**: AI analyzes job requirements and candidate experience to select the most relevant skills
2. **Custom Cover Letter Generation**: AI creates personalized cover letters that match job requirements
3. **Resume Tailoring**: AI customizes resume content to highlight relevant experience for specific positions

## OpenAI API Integration

### API Configuration

- **API key security**: Store OpenAI API key in environment variables
- **Rate limiting**: Implement rate limiting and error handling
- **Safe logging**: Use safe logging practices
- **Template enhancement**: Support template enhancement capabilities

### OpenAI Service

```typescript
// src/lib/openai.ts
export type OpenAIResponse = {
  content: string;
  usage?: {
    prompt_tokens: number;
    completion_tokens: number;
    total_tokens: number;
  };
};

export async function callOpenAI(
  prompt: string,
  systemMessage?: string,
): Promise<OpenAIResponse> {
  if (!env.OPENAI_API_KEY) {
    throw new Error('OpenAI API key is not configured');
  }

  const messages = [
    ...(systemMessage
      ? [{ role: 'system' as const, content: systemMessage }]
      : []),
    { role: 'user' as const, content: prompt },
  ];

  try {
    const response = await fetch('https://api.openai.com/v1/chat/completions', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        Authorization: `Bearer ${env.OPENAI_API_KEY}`,
      },
      body: JSON.stringify({
        model: env.OPENAI_MODEL,
        messages,
        max_tokens: env.OPENAI_MAX_TOKENS,
        temperature: 0.7,
      }),
    });

    if (!response.ok) {
      const error = await response.json().catch(() => ({}));
      throw new Error(
        `OpenAI API error: ${response.status} ${error.error?.message || response.statusText}`,
      );
    }

    const data = await response.json();
    const content = data.choices[0]?.message?.content;

    if (!content) {
      throw new Error('No content received from OpenAI API');
    }

    return {
      content,
      usage: data.usage,
    };
  } catch (error) {
    console.error('OpenAI API call failed:', error);
    throw error;
  }
}
```

## AI Features Implementation

### 1. Intelligent Skill Selection

```typescript
export async function selectRelevantSkills(
  jobDescription: string,
  candidateSkills: string[],
  jobTitle: string,
): Promise<string[]> {
  const systemMessage = `You are an expert at matching candidate skills to job requirements.
Analyze the job description and select the most relevant skills from the candidate's skill list.
Return only the skill names that are most relevant to this specific position.`;

  const prompt = `Job Title: ${jobTitle}

Job Description:
${jobDescription}

Available Skills:
${candidateSkills.join(', ')}

Please select the 5-8 most relevant skills for this position. Return only the skill names, separated by commas.`;

  const response = await callOpenAI(prompt, systemMessage);
  return response.content.split(',').map(skill => skill.trim());
}
```

### 2. Custom Cover Letter Generation

```typescript
export async function generateCoverLetter(
  jobDescription: string,
  companyDetails: string,
  userExperience: string,
  selectedSkills: string[],
): Promise<string> {
  const systemMessage = `You are a professional cover letter writer. Create a compelling, personalized cover letter that:
- Addresses the specific job requirements
- Highlights relevant experience and selected skills
- Shows enthusiasm for the company
- Is professional yet engaging
- Is between 200-300 words
- Uses a professional tone
- Incorporates the selected skills naturally`;

  const prompt = `Please write a cover letter for the following position:

Job Description:
${jobDescription}

Company Information:
${companyDetails}

My Experience:
${userExperience}

Selected Skills to Highlight:
${selectedSkills.join(', ')}

Please write a professional cover letter that connects my experience and skills to this specific role.`;

  const response = await callOpenAI(prompt, systemMessage);
  return response.content;
}
```

### 3. Resume Tailoring

```typescript
export async function tailorResume(
  originalResume: string,
  jobDescription: string,
  jobTitle: string,
  selectedSkills: string[],
): Promise<string> {
  const systemMessage = `You are an expert resume writer. Tailor the provided resume to match the specific job requirements.
- Highlight relevant experience
- Emphasize selected skills
- Adjust language to match job description
- Maintain professional tone
- Keep the same structure but enhance content relevance`;

  const prompt = `Please tailor this resume for the following position:

Job Title: ${jobTitle}

Job Description:
${jobDescription}

Skills to Emphasize:
${selectedSkills.join(', ')}

Original Resume:
${originalResume}

Please provide a tailored version that highlights relevant experience and skills for this specific position.`;

  const response = await callOpenAI(prompt, systemMessage);
  return response.content;
}
```

## AI Integration Patterns

### API Key Management

- **Environment Variables**: Store API keys in environment variables only
- **Client-Side Safety**: Never expose API keys in client-side code
- **Server-Side Validation**: Validate API keys on the server side
- **Key Rotation**: Support API key rotation for security

### Rate Limiting

- **Request throttling**: Implement request throttling
- **Error handling**: Handle rate limit errors gracefully
- **User feedback**: Provide clear feedback for rate limit issues
- **Retry logic**: Implement intelligent retry logic

### Error Handling

- **Graceful degradation**: Handle AI service failures gracefully
- **User feedback**: Provide clear error messages to users
- **Fallback options**: Provide fallback options when AI is unavailable
- **Logging**: Log errors for debugging without exposing sensitive data

## AI Safety

### Content Safety

- **Content filtering**: Filter inappropriate or unsafe content
- **User warnings**: Warn users about AI-generated content
- **Content review**: Allow users to review and edit AI content
- **Safety guidelines**: Follow AI safety best practices

### Data Privacy

- **Data minimization**: Minimize data sent to AI services
- **User consent**: Get user consent for AI processing
- **Data retention**: Implement appropriate data retention policies
- **Privacy controls**: Give users control over their data

## AI Development

### Testing AI Features

- **Mock responses**: Use mock responses for testing
- **Error scenarios**: Test error scenarios and edge cases
- **Performance testing**: Test AI feature performance
- **User experience**: Test AI feature user experience

### AI Feature Flags

- **Feature toggles**: Use feature flags for AI features
- **Gradual rollout**: Roll out AI features gradually
- **A/B testing**: Test AI features with A/B testing
- **User feedback**: Collect user feedback on AI features

## AI Configuration

### Environment Variables

```typescript
// src/config/env.ts
const envSchema = z.object({
  NODE_ENV: z.enum(['development', 'production', 'test']),
  OPENAI_API_KEY: z.string().min(1),
  OPENAI_MODEL: z.string().default('gpt-4'),
  OPENAI_MAX_TOKENS: z.string().transform(Number).default('1000'),
});
```

### AI Service Integration

- **Service abstraction**: Abstract AI service integration
- **Multiple providers**: Support multiple AI providers
- **Service selection**: Allow users to select AI providers
- **Service comparison**: Compare different AI services

## AI User Experience

### User Interface

- **Loading states**: Show appropriate loading states for AI operations
- **Progress indicators**: Show progress for long-running AI operations
- **Error messages**: Provide clear error messages for AI failures
- **Success feedback**: Provide clear success feedback

### User Control

- **AI toggle**: Allow users to enable/disable AI features
- **Content editing**: Allow users to edit AI-generated content
- **Regeneration**: Allow users to regenerate AI content
- **Customization**: Allow users to customize AI behavior

## AI Documentation

### API Documentation

- **Clear documentation**: Document AI API usage clearly
- **Examples**: Provide clear examples of AI API usage
- **Error codes**: Document AI API error codes
- **Best practices**: Document AI API best practices

### User Documentation

- **Feature explanation**: Explain AI features to users
- **Usage guides**: Provide usage guides for AI features
- **Troubleshooting**: Provide troubleshooting for AI issues
- **FAQ**: Provide FAQ for common AI questions
