---
globs: ['**/config/**/*.ts', '**/config/**/*.js', '**/config/**/*.mjs', '**/lib/schemas.ts', '**/lib/openai.ts', '**/lib/documentGeneration.ts', 'package.json', 'next.config.mjs', 'tailwind.config.js', 'tsconfig.json', 'eslint.config.mjs', 'postcss.config.mjs']
exclude: ['**/__tests__/**', '**/*.test.*', '**/*.spec.*', '**/node_modules/**', '**/dist/**', '**/.next/**']
---

# Environment Configuration

## Environment Variables

### Security

- **API keys**: Store sensitive data in environment variables only
- **Client-side safety**: Never expose API keys in client-side code
- **Server-side validation**: Validate environment variables on the server side
- **Key rotation**: Support API key rotation for security

### Environment Schema

```typescript
// src/config/env.ts
import { z } from 'zod';

const envSchema = z.object({
  NODE_ENV: z.enum(['development', 'production', 'test']),
  OPENAI_API_KEY: z.string().min(1),
  OPENAI_MODEL: z.string().default('gpt-4'),
  OPENAI_MAX_TOKENS: z.string().transform(Number).default('1000'),
});

export const env = envSchema.parse(process.env);
```

### Required Variables

```typescript
// Environment variables that must be set
const requiredEnvVars = [
  'OPENAI_API_KEY',
] as const;

// Validate required environment variables
for (const envVar of requiredEnvVars) {
  if (!process.env[envVar]) {
    throw new Error(`Missing required environment variable: ${envVar}`);
  }
}
```

### Environment Files

```bash
# .env.local (development)
NODE_ENV=development
OPENAI_API_KEY=your_openai_api_key_here
OPENAI_MODEL=gpt-4
OPENAI_MAX_TOKENS=1000

# .env.production (production)
NODE_ENV=production
OPENAI_API_KEY=your_production_openai_api_key
OPENAI_MODEL=gpt-4
OPENAI_MAX_TOKENS=1000
```

## Build Configuration

### Next.js Configuration

```javascript
// next.config.mjs
/** @type {import('next').NextConfig} */
const nextConfig = {
  experimental: {
    turbo: {
      rules: {
        '*.svg': {
          loaders: ['@svgr/webpack'],
          as: '*.js',
        },
      },
    },
  },
  images: {
    remotePatterns: [
      {
        protocol: 'https',
        hostname: '**',
      },
    ],
  },
};

export default nextConfig;
```

### Development Tools

- **Turbopack**: Use Turbopack for faster development builds
- **Hot reload**: Enable hot module replacement for development
- **Source maps**: Generate source maps for debugging
- **Bundle analysis**: Use bundle analyzer for optimization

## Scripts

### Package.json Scripts

```json
{
  "scripts": {
    "dev": "next dev --turbo",
    "build": "next build",
    "start": "next start",
    "lint": "next lint",
    "type-check": "tsc --noEmit",
    "test": "vitest",
    "test:ui": "vitest --ui",
    "test:coverage": "vitest --coverage",
    "test:e2e": "playwright test",
    "test:e2e:ui": "playwright test --ui"
  }
}
```

### Build Commands

- **Development**: `pnpm dev` - Start development server with Turbopack
- **Production build**: `pnpm build` - Build for production
- **Production start**: `pnpm start` - Start production server
- **Linting**: `pnpm lint` - Run ESLint
- **Type checking**: `pnpm type-check` - Run TypeScript type checking

## Configuration Files

### TypeScript Configuration

```json
// tsconfig.json
{
  "compilerOptions": {
    "lib": ["dom", "dom.iterable", "es6"],
    "allowJs": true,
    "skipLibCheck": true,
    "strict": true,
    "noEmit": true,
    "esModuleInterop": true,
    "module": "esnext",
    "moduleResolution": "bundler",
    "resolveJsonModule": true,
    "isolatedModules": true,
    "jsx": "preserve",
    "incremental": true,
    "plugins": [
      {
        "name": "next"
      }
    ],
    "baseUrl": ".",
    "paths": {
      "@/*": ["./src/*"]
    }
  },
  "include": ["next-env.d.ts", "**/*.ts", "**/*.tsx", ".next/types/**/*.ts"],
  "exclude": ["node_modules"]
}
```

### ESLint Configuration

```javascript
// eslint.config.mjs
import js from '@eslint/js';
import nextPlugin from '@next/eslint-plugin-next';
import reactHooksPlugin from 'eslint-plugin-react-hooks';
import reactRefreshPlugin from 'eslint-plugin-react-refresh';

export default [
  js.configs.recommended,
  {
    files: ['**/*.{js,jsx,ts,tsx}'],
    plugins: {
      '@next/next': nextPlugin,
      'react-hooks': reactHooksPlugin,
      'react-refresh': reactRefreshPlugin,
    },
    rules: {
      ...nextPlugin.configs.recommended.rules,
      ...reactHooksPlugin.configs.recommended.rules,
      'react-refresh/only-export-components': [
        'warn',
        { allowConstantExport: true },
      ],
    },
  },
  {
    files: ['**/*.{js,jsx,ts,tsx}'],
    languageOptions: {
      parserOptions: {
        ecmaVersion: 'latest',
        sourceType: 'module',
        ecmaFeatures: {
          jsx: true,
        },
      },
    },
  },
];
```

### Tailwind Configuration

```javascript
// tailwind.config.js
/** @type {import('tailwindcss').Config} */
module.exports = {
  content: [
    './src/pages/**/*.{js,ts,jsx,tsx,mdx}',
    './src/components/**/*.{js,ts,jsx,tsx,mdx}',
    './src/app/**/*.{js,ts,jsx,tsx,mdx}',
  ],
  theme: {
    extend: {
      colors: {
        primary: 'var(--color-primary)',
        secondary: 'var(--color-secondary)',
        success: 'var(--color-success)',
        danger: 'var(--color-danger)',
        navigation: 'var(--color-navigation)',
      },
    },
  },
  plugins: [],
};
```

### PostCSS Configuration

```javascript
// postcss.config.mjs
export default {
  plugins: {
    tailwindcss: {},
    autoprefixer: {},
  },
};
```

## Security

### API Key Management

- **Environment variables**: Store API keys in environment variables
- **Server-side only**: Keep API keys on the server side only
- **Key rotation**: Implement API key rotation procedures
- **Access control**: Implement proper access control for API keys

### Data Protection

- **Input validation**: Validate all user inputs
- **Output encoding**: Encode output to prevent XSS
- **CSRF protection**: Implement CSRF protection
- **Content Security Policy**: Implement CSP headers

## Performance

### Build Optimization

- **Tree shaking**: Enable tree shaking for smaller bundles
- **Code splitting**: Use dynamic imports for code splitting
- **Image optimization**: Use Next.js image optimization
- **Font optimization**: Optimize font loading

### Runtime Performance

- **Caching**: Implement appropriate caching strategies
- **Lazy loading**: Use lazy loading for non-critical components
- **Bundle analysis**: Regular bundle analysis for optimization
- **Performance monitoring**: Monitor performance metrics
